//
// Global functions to help simplify code
//
function $(id) 
{
  return document.getElementById(id);
}

//
// Global variable for access to amin text areas
//
//var translationObj = $("textarea1");
//var sourceObj = $("textarea");

// check if browser is compatible
// if (top.myBrowser && top.myBrowser.needsXMLHttpRequestVariable) {var XMLHttpRequest;}

/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    translatorSetup();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function clearClickHandler(event)
{
    // clear text in source and translation
    $('SourceText').value = '';
    $('TranslationText').value = 'click here to translate...';
       
}

function changeClickHandler(event)
{
    // swap around languages
    var source_language = $("SourceLanguage");
    var sink_language = $("SinkLanguage");
    
    var language = source_language.value;
    
    if (language.length == 0) { 
      language = "en";
    }
    
    source_language.value = sink_language.value;
    sink_language.value = language;
}

function myClickHandler(event)
{
    
    translate();
    
    
}

function btnTranslateHandler(event)
{
    // do translation
    translate();
}
